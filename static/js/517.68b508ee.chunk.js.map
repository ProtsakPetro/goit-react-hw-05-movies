{"version":3,"file":"static/js/517.68b508ee.chunk.js","mappings":"sQAqCA,EAlCmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OAEpB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAgBF,EAAaG,IAAI,WAAa,GAYpD,OACE,iBAAMC,SANa,SAACC,GACpBA,EAAEC,iBACFR,EAAOI,EACR,EAGC,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEK,KAAK,QACLC,KAAK,OACLC,SAfa,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACxBT,EAARS,EAAwB,CAAEE,OAAQF,GAA2B,CAAC,EAC/D,EAcOG,GAAG,eACHH,MAAOR,EACPY,YAAY,cACZC,UAAQ,KAEV,SAAC,KAAD,CAAQP,KAAK,SAAb,wBAIP,E,SC/BKQ,EAAS,IAAIC,gBAAgB,CACjCC,cAAe,QACfC,SAAU,QACVC,KAAM,MAIKC,EAAmB,mCAAG,WAAMC,GAAN,yFACVC,EAAAA,EAAAA,IAAA,UAVR,4CAUQ,YAAyBP,EAAzB,kBAAyCM,GAAe,CAC7EE,QAAS,CACPC,OAAQ,mBACRC,cAAe,gOAJc,uBACzBC,EADyB,EACzBA,KADyB,kBAQ1BA,GAR0B,2CAAH,sDC8ChC,EAhDmB,WACjB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,MAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAsCN,EAAAA,EAAAA,UAAS,IAA/C,eAAON,EAAP,KAAoBa,EAApB,KAEA,GAAuBpC,EAAAA,EAAAA,MACjBqC,GADN,eAC2BjC,IAAI,UACzBkC,GAAMC,EAAAA,EAAAA,QAAOF,GAMbG,GAAeC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,GAAP,uFAE7BT,GAAa,GACbE,EAAgB,MAHa,SAIVb,EAAoBoB,GAJV,OAIvBd,EAJuB,OAK7BO,EAAgBP,EAAKe,SALQ,gDAO7BZ,EAAS,KAAMa,SAAShB,MAPK,yBAS7BK,GAAa,GATgB,4EAAD,sDAW7B,IAWH,OARAY,EAAAA,EAAAA,YAAU,WACRtB,GAAeiB,EAAajB,EAC7B,GAAE,CAACiB,EAAcjB,KAEjBsB,EAAAA,EAAAA,YAAU,WACPP,EAAIQ,SAAWN,EAAaF,EAAIQ,QACjC,GAAE,CAACN,KAGJ,UAAC,KAAD,YACE,SAAC,EAAD,CAAYzC,OA5BD,SAAAY,GACbyB,EAAezB,EAChB,IA2BIqB,GAAa,aACbF,GAASA,EAAMiB,QACfb,IAAkBA,EAAac,QAE9B,SAACC,EAAA,EAAD,CAAYrB,KAAMM,KADrB,6CAIJ,C","sources":["components/SearchForm.jsx","api/searchMoviesByQuery.js","pages/Movies.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport { Button, FormWrap, Input } from './Parts.styled';\n\nconst SearchForm = ({ submit }) => {\n  //const[value, setValue] = useState('')\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const queryByParams = searchParams.get('search') || ''\n\n \n  const handleChange = ({ target: { value } }) => {\n    value ? setSearchParams({ search: value }) : setSearchParams({})\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    submit(queryByParams);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormWrap>\n        <Input\n          name=\"title\"\n          type=\"text\"\n          onChange={handleChange}\n          id=\"searchMovies\"\n          value={queryByParams}\n          placeholder=\"I search...\"\n          required\n        />\n        <Button type=\"submit\">SEARCH</Button>\n      </FormWrap>\n    </form>\n  );\n}\n\nexport default SearchForm","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n\nconst params = new URLSearchParams({\n  include_adult: 'false',\n  language: 'en-US',\n  page: '1',\n \n});\n\nexport const searchMoviesByQuery = async searchQuery => {\n  const { data } = await axios.get(`${BASE_URL}?${params}&query=${searchQuery}`, {\n    headers: {\n      accept: 'application/json',\n      Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5NjU5ZDljNDA1MDhkOGIzZjNhOWM1YmJmNGQ4MjMxYiIsInN1YiI6IjY1MjliYTlmODEzODMxMDBjNDhhZjFhYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fINv1qn7RIF6QqQY4oOTPAsipMP0leD8fxTF0uky0-A',\n                                      },\n  });\n\n  return data;\n};","import React, { useRef } from 'react';\nimport { useEffect, useState, useCallback } from 'react';\n\nimport MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { searchMoviesByQuery } from '../api/searchMoviesByQuery';\nimport { useSearchParams } from 'react-router-dom';\nimport { Movies } from 'components/Parts.styled';\n\nconst MoviesPage = () => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [findedMovies, setFindedMovies] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('search');\n  const ref = useRef(query);\n\n  const submit = value => {\n    setSearchQuery(value);\n  };\n\n  const fetchByQuery = useCallback(async (dataForSearch) => {\n    try {\n      setIsLoading(true);\n      setFindedMovies(null);\n      const data = await searchMoviesByQuery(dataForSearch);\n      setFindedMovies(data.results);\n    } catch (error) {\n      setError(error.response.data);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  //\n  useEffect(() => {\n    searchQuery && fetchByQuery(searchQuery);\n  }, [fetchByQuery, searchQuery]);\n\n  \tuseEffect(() => {\n      ref.current && fetchByQuery(ref.current);\n    }, [fetchByQuery]);\n\n  return (\n    <Movies>\n      <SearchForm submit={submit}></SearchForm>\n      {isLoading && 'Loading...'}\n      {error && error.message}\n      {findedMovies && (!findedMovies.length ? (\n\t\t\t\t\t<h1>No data found</h1>\n\t\t\t\t) : <MoviesList data={findedMovies} />)}\n    </Movies>\n  );\n};\n\nexport default MoviesPage;"],"names":["submit","useSearchParams","searchParams","setSearchParams","queryByParams","get","onSubmit","e","preventDefault","name","type","onChange","value","target","search","id","placeholder","required","params","URLSearchParams","include_adult","language","page","searchMoviesByQuery","searchQuery","axios","headers","accept","Authorization","data","useState","error","setError","isLoading","setIsLoading","findedMovies","setFindedMovies","setSearchQuery","query","ref","useRef","fetchByQuery","useCallback","dataForSearch","results","response","useEffect","current","message","length","MoviesList"],"sourceRoot":""}